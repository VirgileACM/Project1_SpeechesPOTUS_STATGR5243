test_set <- 19:79
length(test_set)
response <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=0.9)
# Plot the results
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset",pch=20)
par(new=TRUE)
plot(test_set,response,col='red',ylim=range(dataWage$wage),pch=19,xlab = "" ,ylab="")
legend("topright",c("training set","estimate"),pch=c(20,19),col=c("blue","red"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset",pch=20)
par(new=TRUE)
plot(test_set,response,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
legend("topright",c("training set","estimate"),pch=c(20,19),col=c("blue","red"))
18:77
c(18:77,80)
sigma = var( predictions[c(18:77,80)] - simplifiedDataWage$wage ) #since we don't have any points for age 78 and 79
sigma
predictions[c(18:77,80)]
test_set <- 18:80
predictions <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=0.6)
predictions[c(18:77,80)]
predictions <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=4)
predictions[c(18:77,80)]
response <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=0.9)
response
response <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=0.6)
response
predictions <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=0.6)
sigma = var( predictions[c(18:77,80)] - simplifiedDataWage$wage ) #since we don't have any points for age 78 and 79
sigma
predictions
predictions[c(18:77,80)]
c(18:77,80)-61
c(18:77,80)-18
c(18:77,80)-17
sigma = var( predictions[c(18:77,80)-17] - simplifiedDataWage$wage ) #since we don't have any points for age 78 and 79
sigma
sqrt(sum(c(1,2,3,4)^2))
LocalLinearReg1Dvariance <- function(x0,x,y,lambda){
# Compute the closed form solution of the local linear regression in x0, i.e.:
# ^f_lambda(x0) = [1 x0]*^theta, with ^theta minimizing t(Y-B*theta)*W*(Y-B*theta)
B <- cbind(matrix(rep(1,length(x)),ncol=1),as.matrix(x,ncol=1))
Y <- as.matrix(y,ncol=1)
W <- diag(Gaussian_kernel(x,x0,lambda))
l_lambda <- (matrix(c(1,x0),nrow=1) %*% solve(t(B) %*% W %*% B) %*% t(B) %*% W)
return ( c(l_lambda%*% Y, sqrt(sum(l_lambda^2))) )
}
LocalLinearReg1D(40,x=dataWage$age,y=dataWage$wage,lambda=0.6)
LocalLinearReg1Dvariance(40,x=dataWage$age,y=dataWage$wage,lambda=0.6)
LocalLinearReg1Dvariance(40,x=dataWage$age,y=dataWage$wage,lambda=0.6)
LocalLinearReg1Dvariance <- function(x0,x,y,lambda){
# Compute the closed form solution of the local linear regression in x0, i.e.:
# ^f_lambda(x0) = [1 x0]*^theta, with ^theta minimizing t(Y-B*theta)*W*(Y-B*theta)
B <- cbind(matrix(rep(1,length(x)),ncol=1),as.matrix(x,ncol=1))
Y <- as.matrix(y,ncol=1)
W <- diag(Gaussian_kernel(x,x0,lambda))
l_lambda <- (matrix(c(1,x0),nrow=1) %*% solve(t(B) %*% W %*% B) %*% t(B) %*% W)
return ( c(l_lambda%*% Y, sigma^2*sqrt(sum(l_lambda^2))) )
}
LocalLinearReg1Dvariance(40,x=dataWage$age,y=dataWage$wage,lambda=0.6)
EstimatesVar <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1Dvariance,x=dataWage$age,y=dataWage$wage,lambda=0.6)
EstimatesVar
head(EstimatesVar)
head(EstimatesVar,1)
EstimatesVar[1,]
EstimatesVar[2,]
test_set <- 18:80
EstimatesVar <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1Dvariance,x=dataWage$age,y=dataWage$wage,lambda=0.6)
estimates <- EstimatesVar[1,]
varf <- EstimatesVar[2,]
# Plot the results
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
lines(test_set,estimates+1.96*sqrt(varf),col='black',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
lines(test_set,estimates-1.96*sqrt(varf),col='black',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","black","black"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
lines(test_set,estimates+1.96*sqrt(varf),col='black',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=5)
par(new=TRUE)
lines(test_set,estimates-1.96*sqrt(varf),col='black',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=5)
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","black","black"))
# Plot the results
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
lines(test_set,estimates+1.96*sqrt(varf),col='black',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=20)
par(new=TRUE)
lines(test_set,estimates-1.96*sqrt(varf),col='black',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=5)
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","black","black"))
?lines
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=20)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=5)
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=3)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=3)
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","black","black"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.3)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.3)
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","black","black"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=1)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=1)
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","black","black"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='yellow',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='purple',type="b",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","yellow","purple"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='yellow',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='purple',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),pch=c(20,19,19,19),col=c("blue","red","yellow","purple"))
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),lty=c(0,0,0.5,0.5),pch=c(20,19,19,19),col=c("blue","red","yellow","purple"))
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),lty=c(1,1,0.5,0.5),pch=c(20,19,19,19),col=c("blue","red","yellow","purple"))
legend("topright",c("training set","estimate","higher bound 95%","lower bound 95%"),lty=c(0,0,1,1),pch=c(20,19,19,19),col=c("blue","red","yellow","purple"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
legend("topright",c("training set","estimate","higher  and lower 95% bounds"),lty=c(0,0,1),pch=c(20,19,19),col=c("blue","red","yellow","purple"))
# Plot the results
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
legend("topright",c("training set","estimate","higher and lower 95% bounds"),lty=c(0,0,1),pch=c(20,19,19),col=c("blue","red","yellow","purple"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
legend("topright",c("training set","estimate","higher and lower 95% bounds"),lty=c(0,0,1),pch=c(20,19,19),col=c("blue","red","black"))
sigma = var( predictions[c(18:77,80)-17] - simplifiedDataWage$wage ) #since we don't have any points for age 78 and 79
# We create a new function to obtain for each x0 the ^f(x0) and the sigma^2*||l(x0)||^2
LocalLinearReg1Dvariance <- function(x0,x,y,lambda){
# Compute the closed form solution of the local linear regression in x0, i.e.:
# ^f_lambda(x0) = [1 x0]*^theta, with ^theta minimizing t(Y-B*theta)*W*(Y-B*theta)
B <- cbind(matrix(rep(1,length(x)),ncol=1),as.matrix(x,ncol=1))
Y <- as.matrix(y,ncol=1)
W <- diag(Gaussian_kernel(x,x0,lambda))
l_lambda <- (matrix(c(1,x0),nrow=1) %*% solve(t(B) %*% W %*% B) %*% t(B) %*% W)
return ( c(l_lambda%*% Y, sigma*sqrt(sum(l_lambda^2))) )
}
# Compute the estimates
test_set <- 18:80
EstimatesVar <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1Dvariance,x=dataWage$age,y=dataWage$wage,lambda=0.6)
estimates <- EstimatesVar[1,]
varf <- EstimatesVar[2,]
# Plot the results
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
legend("topright",c("training set","estimate","higher and lower 95% bounds"),lty=c(0,0,1),pch=c(20,19,19),col=c("blue","red","black"))
sigma
sigma2 = var( predictions[c(18:77,80)-17] - simplifiedDataWage$wage ) #since we don't have any points for age 78 and 79
# We create a new function to obtain for each x0 the ^f(x0) and the sigma^2*||l(x0)||^2
LocalLinearReg1Dvariance <- function(x0,x,y,lambda){
# Compute the closed form solution of the local linear regression in x0, i.e.:
# ^f_lambda(x0) = [1 x0]*^theta, with ^theta minimizing t(Y-B*theta)*W*(Y-B*theta)
B <- cbind(matrix(rep(1,length(x)),ncol=1),as.matrix(x,ncol=1))
Y <- as.matrix(y,ncol=1)
W <- diag(Gaussian_kernel(x,x0,lambda))
l_lambda <- (matrix(c(1,x0),nrow=1) %*% solve(t(B) %*% W %*% B) %*% t(B) %*% W)
return ( c(l_lambda%*% Y, sigma2*sqrt(sum(l_lambda^2))^2) )
}
LocalLinearReg1D(40,x=dataWage$age,y=dataWage$wage,lambda=0.6)
LocalLinearReg1Dvariance(40,x=dataWage$age,y=dataWage$wage,lambda=0.6)
# Compute the estimates
test_set <- 18:80
EstimatesVar <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1Dvariance,x=dataWage$age,y=dataWage$wage,lambda=0.6)
estimates <- EstimatesVar[1,]
varf <- EstimatesVar[2,]
# Plot the results
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
legend("topright",c("training set","estimate","higher and lower 95% bounds"),lty=c(0,0,1),pch=c(20,19,19),col=c("blue","red","black"))
LocalLinearReg1Dvariance <- function(x0,x,y,lambda){
# Compute the closed form solution of the local linear regression in x0, i.e.:
# ^f_lambda(x0) = [1 x0]*^theta, with ^theta minimizing t(Y-B*theta)*W*(Y-B*theta)
B <- cbind(matrix(rep(1,length(x)),ncol=1),as.matrix(x,ncol=1))
Y <- as.matrix(y,ncol=1)
W <- diag(Gaussian_kernel(x,x0,lambda))
l_lambda <- (matrix(c(1,x0),nrow=1) %*% solve(t(B) %*% W %*% B) %*% t(B) %*% W)
return ( c(l_lambda%*% Y, sigma2*sum(l_lambda^2)) )
}
predictions <- apply(as.matrix(dataWage$age),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=0.6)
predictions <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age,y=dataWage$wage,lambda=0.6)
sigma2 = var( predictions[c(18:77,80)-17] - simplifiedDataWage$wage ) #since we don't have any points for age 78 and 79
test_set <- 18:80
EstimatesVar <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1Dvariance,x=dataWage$age,y=dataWage$wage,lambda=0.6)
estimates <- EstimatesVar[1,]
varf <- EstimatesVar[2,]
# Plot the results
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.7)
legend("topright",c("training set","estimate","higher and lower 95% bounds"),lty=c(0,0,1),pch=c(20,19,19),col=c("blue","red","black"))
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
par(new=TRUE)
plot(test_set,estimates-1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
legend("topright",c("training set","estimate","higher and lower 95% bounds"),lty=c(0,0,1),pch=c(20,19,19),col=c("blue","red","black"))
nrow(dataWage)
ncol(dataWage)
N <- 200
n <- nrow(dataWage)
resampled_values <- matrix(NA, nrow = N, ncol = n)
for (b in 1:N) {
resampled_values[b,] = sample(1:n,n,replace=T)
}
# For each new dataset, we estimate all the points from 18 to 80
predictions <- matrix(NA, nrow = N, ncol = 63)
for (i in 1:N) {
predictions[i,] <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[i,]],y=dataWage$wage[resampled_values[i,]],lambda=0.6)
}
predictions[1,] <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[1,]],y=dataWage$wage[resampled_values[1,]],lambda=0.6)
N <- 10
n <- nrow(dataWage)
resampled_values <- matrix(NA, nrow = N, ncol = n)
for (b in 1:N) {
resampled_values[b,] = sample(1:n,n,replace=T)
}
# For each new dataset, we estimate all the points from 18 to 80
predictions <- matrix(NA, nrow = N, ncol = 63)
for (i in 1:N) {
predictions[i,] <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[i,]],y=dataWage$wage[resampled_values[i,]],lambda=0.6)
}
dim(predictions)
dim(apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[3,]],y=dataWage$wage[resampled_values[3,]],lambda=0.6))
length(apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[3,]],y=dataWage$wage[resampled_values[3,]],lambda=0.6))
n <- nrow(dataWage)
resampled_values <- matrix(NA, nrow = N, ncol = n)
for (b in 1:N) {
resampled_values[b,] = sample(1:n,n,replace=T)
}
# For each new dataset, we estimate all the points from 18 to 80
predictions <- matrix(NA, nrow = N, ncol = 63)
for (i in 1:N) {
predictions[i,] <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[i,]],y=dataWage$wage[resampled_values[i,]],lambda=0.6)
}
predictions
resampled_values[1,]
resampled_values[2,]
length(resampled_values[2,])
length(resampled_values[1,])
N <- 10
n <- nrow(dataWage)
resampled_values <- matrix(NA, nrow = N, ncol = n)
for (b in 1:N) {
resampled_values[b,] = sample(1:n,n,replace=T)
}
# For each new dataset, we estimate all the points from 18 to 80
predictions <- matrix(NA, nrow = N, ncol = 63)
for (i in 1:N) {
predictions[i,] <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[i,]],y=dataWage$wage[resampled_values[i,]],lambda=0.6)
}
predictions
predictions[1:2,]
apply(predictions[1:2,],2,mean)
apply(predictions[1:2,],1,var)
apply(predictions[1:2,],2,var)
resampled_values <- NULL
N <- 10
n <- nrow(dataWage)
resampled_values <- matrix(NA, nrow = N, ncol = n)
for (b in 1:N) {
resampled_values[b,] = sample(1:n,n,replace=T)
}
# For each new dataset, we estimate all the points from 18 to 80
predictions <- matrix(NA, nrow = N, ncol = 63)
for (i in 1:N) {
predictions[i,] <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[i,]],y=dataWage$wage[resampled_values[i,]],lambda=0.6)
}
predictions
# Compute mean and var estimates
estimates2 <- apply(predictions[1:7,],2,mean)
varf2 <- apply(predictions[1:7,],2,var)/N
# Plot to compare with precedent result
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
par(new=TRUE)
plot(test_set,estimates2,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates2+1.96*sqrt(varf2),col='pink',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
par(new=TRUE)
plot(test_set,estimates2-1.96*sqrt(varf2),col='pink',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
legend("topright",c("training set","estimate","higher and lower 95% bounds","higher and lower 95% bounds bootstrap"),lty=c(0,0,1,1),pch=c(20,19,19,19),col=c("blue","red","black","pink"))
N <- 10
n <- nrow(dataWage)
resampled_values <- NULL
resampled_values <- matrix(NA, nrow = N, ncol = n)
for (b in 1:N) {
resampled_values[b,] = sample(1:n,n,replace=T)
}
# For each new dataset, we estimate all the points from 18 to 80
predictions2 <- NULL
predictions2 <- matrix(NA, nrow = N, ncol = 63)
for (i in 1:N) {
predictions2[i,] <- apply(as.matrix(test_set),1,FUN=LocalLinearReg1D,x=dataWage$age[resampled_values[i,]],y=dataWage$wage[resampled_values[i,]],lambda=0.6)
}
predictions2
plot(dataWage$age,dataWage$wage,col='blue',xlab="age",ylab="wage",main="Local Linear Regression on Wage dataset\nwith 95% confidence interval",pch=20)
par(new=TRUE)
plot(test_set,estimates,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates+1.96*sqrt(varf),col='black',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
par(new=TRUE)
plot(test_set,estimates2,col='red',ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="")
par(new=TRUE)
plot(test_set,estimates2+1.96*sqrt(varf2),col='pink',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
par(new=TRUE)
plot(test_set,estimates2-1.96*sqrt(varf2),col='pink',type="o",ylim=range(dataWage$wage),xlim=range(dataWage$age),pch=19,xlab = "" ,ylab="",cex=0.5)
legend("topright",c("training set","estimate","higher and lower 95% bounds","higher and lower 95% bounds bootstrap"),lty=c(0,0,1,1),pch=c(20,19,19,19),col=c("blue","red","black","pink"))
lambda_range=seq(0.5,20,by=0.05)
y <- apply(t(as.matrix(lambda_range)),2,Crossvalidation)
plot(lambda_range,y,ylab="Cross validation error",xlab="lambda",main="Evolution of CV error regarding lambda")
lambda_optimal <- lambda_range[which.max(y)]
# => We find an optimal lambda of 0.6.
lambda_optimal
library(glmnet)
?cv.glmnet
?glmnet
exp(c(1,2,3))
1:10
-10:10
length(-10:10)
length(-11:11)
n=10
-2n:2n
-2*n:2*n
(-2*n):(2*n)
(-n):n
-n:n
(-n:n)[0:2]
(-n:n)[0:n]
half_gaussian_kernel <- function(n,sigma){
x <- -n:n
k <- -exp(1/2*x^2/sigma^2)/(sqrt(2*pi)*sigma)
return ( k[0:n]/sum(k[0:n]) )
}
half_gaussian_kernel(10,1)
half_gaussian_kernel <- function(n,sigma){
x <- -n:n
k <- exp(-1/2*x^2/sigma^2)/(sqrt(2*pi)*sigma)
return ( k[0:n]/sum(k[0:n]) )
}
half_gaussian_kernel(10,1)
n=10
sigma=1
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
n=800
sigma=400
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
n=800
sigma=200
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
n=800
sigma=800
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
n=800
sigma=800
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)==1
sum(y)
n=800
sigma=800
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
half_gaussian_kernel <- function(n,sigma){
x <- -n:n
k <- exp(-1/2*x^2/sigma^2)/(sqrt(2*pi)*sigma)
return ( k[0:n]/sum(k[0:n]) )
}
n=800
sigma=300
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
half_gaussian_kernel <- function(n,sigma){
'''
Calculate the coefficients of a discrete 1D Gaussian(0,sigma) kernel of length 2*n
and then takes only the part on the left of y-axis, and normalize it.
We do this to obtain a 1D exponential filter to compute a gaussian weighted average centered
on the right of our data (most recent one).
'''
x <- -n:n
k <- exp(-1/2*x^2/sigma^2)/(sqrt(2*pi)*sigma)
return ( k[0:n]/sum(k[0:n]) )
}
n=800
sigma=300
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
n=500
sigma=200
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
n=100
sigma=40
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
sigma=20
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
sigma=40
n=100
sigma=40
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
n=100
sigma=20
y<-half_gaussian_kernel(n,sigma)
plot(1:n,y)
sum(y)
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
print(packages.needed)
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
packages.needed
setwd("~/Google Drive/MAFN/AppliedDS/Project1/TutorialSpeech/doc")
install.packages("tydytext")
install.packages()
installed.packages()
installed.packages()["Built"]
installed.packages()[,6]
installed.packages()
installed.packages()[,5]
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
